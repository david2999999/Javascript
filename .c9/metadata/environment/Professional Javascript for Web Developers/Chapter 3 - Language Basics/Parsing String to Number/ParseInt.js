{"filter":false,"title":"ParseInt.js","tooltip":"/Professional Javascript for Web Developers/Chapter 3 - Language Basics/Parsing String to Number/ParseInt.js","undoManager":{"mark":5,"position":5,"stack":[[{"start":{"row":0,"column":0},"end":{"row":5,"column":46},"action":"insert","lines":["var num1 = parseInt(“1234blue”); //1234","var num2 = parseInt(“”); //NaN","var num3 = parseInt(“0xA”); //10 - hexadecimal","var num4 = parseInt(22.5); //22","var num5 = parseInt(“70”); //70 - decimal","var num6 = parseInt(“0xf”); //15 - hexadecimal"],"id":1}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":2},{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":0,"column":0},"end":{"row":6,"column":97},"action":"insert","lines":["Because of the complexities and oddities of the Number() function when converting strings, the","parseInt() function is usually a better option when you are dealing with integers. The parseInt()","function examines the string much more closely to see if it matches a number pattern. Leading white","space in the string is ignored until the fi rst non–white space character is found. If this fi rst character","isn’t a number, the minus sign, or the plus sign, parseInt() always returns NaN, which means the","empty string returns NaN (unlike with Number(), which returns 0). If the fi rst character is a number,","plus, or minus, then the conversion goes on to the second character and continues on until either"],"id":3}],[{"start":{"row":7,"column":0},"end":{"row":13,"column":57},"action":"insert","lines":["the end of the string is reached or a nonnumeric character is found. For instance, “1234blue” is","converted to 1234 because “blue” is completely ignored. Similarly, “22.5” will be converted to 22","because the decimal is not a valid integer character.","Assuming that the fi rst character in the string is a number, the parseInt() function also recognizes","the various integer formats (decimal, octal, and hexadecimal, as discussed previously). This means","when the string begins with “0x”, it is interpreted as a hexadecimal integer; if it begins with “0”","followed by a number, it is interpreted as an octal value"],"id":4}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":3},"action":"insert","lines":["// "],"id":5},{"start":{"row":1,"column":0},"end":{"row":1,"column":3},"action":"insert","lines":["// "]},{"start":{"row":2,"column":0},"end":{"row":2,"column":3},"action":"insert","lines":["// "]},{"start":{"row":3,"column":0},"end":{"row":3,"column":3},"action":"insert","lines":["// "]},{"start":{"row":4,"column":0},"end":{"row":4,"column":3},"action":"insert","lines":["// "]},{"start":{"row":5,"column":0},"end":{"row":5,"column":3},"action":"insert","lines":["// "]},{"start":{"row":6,"column":0},"end":{"row":6,"column":3},"action":"insert","lines":["// "]},{"start":{"row":7,"column":0},"end":{"row":7,"column":3},"action":"insert","lines":["// "]},{"start":{"row":8,"column":0},"end":{"row":8,"column":3},"action":"insert","lines":["// "]},{"start":{"row":9,"column":0},"end":{"row":9,"column":3},"action":"insert","lines":["// "]},{"start":{"row":10,"column":0},"end":{"row":10,"column":3},"action":"insert","lines":["// "]},{"start":{"row":11,"column":0},"end":{"row":11,"column":3},"action":"insert","lines":["// "]},{"start":{"row":12,"column":0},"end":{"row":12,"column":3},"action":"insert","lines":["// "]},{"start":{"row":13,"column":0},"end":{"row":13,"column":3},"action":"insert","lines":["// "]}],[{"start":{"row":13,"column":60},"end":{"row":14,"column":0},"action":"insert","lines":["",""],"id":6}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":15,"column":39},"end":{"row":15,"column":39},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1558610187429,"hash":"8e17ce3f361a762a4ea4efac6f894de40af34050"}